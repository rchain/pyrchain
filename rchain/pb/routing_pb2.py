# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: routing.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from .scalapb import scalapb_pb2 as scalapb_dot_scalapb__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\rrouting.proto\x12\x07routing\x1a\x15scalapb/scalapb.proto\"D\n\x04Node\x12\n\n\x02id\x18\x01 \x01(\x0c\x12\x0c\n\x04host\x18\x02 \x01(\x0c\x12\x10\n\x08tcp_port\x18\x03 \x01(\r\x12\x10\n\x08udp_port\x18\x04 \x01(\r\"B\n\x06Header\x12%\n\x06sender\x18\x01 \x01(\x0b\x32\r.routing.NodeB\x06\xe2?\x03\xf0\x01\x01\x12\x11\n\tnetworkId\x18\x02 \x01(\t\"\x0b\n\tHeartbeat\"\x13\n\x11HeartbeatResponse\"\"\n\x11ProtocolHandshake\x12\r\n\x05nonce\x18\x01 \x01(\x0c\"*\n\x19ProtocolHandshakeResponse\x12\r\n\x05nonce\x18\x01 \x01(\x0c\")\n\x06Packet\x12\x0e\n\x06typeId\x18\x01 \x01(\t\x12\x0f\n\x07\x63ontent\x18\x02 \x01(\x0c\"\x0c\n\nDisconnect\"\xba\x02\n\x08Protocol\x12\'\n\x06header\x18\x01 \x01(\x0b\x32\x0f.routing.HeaderB\x06\xe2?\x03\xf0\x01\x01\x12\'\n\theartbeat\x18\x02 \x01(\x0b\x32\x12.routing.HeartbeatH\x00\x12\x38\n\x12protocol_handshake\x18\x03 \x01(\x0b\x32\x1a.routing.ProtocolHandshakeH\x00\x12I\n\x1bprotocol_handshake_response\x18\x04 \x01(\x0b\x32\".routing.ProtocolHandshakeResponseH\x00\x12!\n\x06packet\x18\x05 \x01(\x0b\x32\x0f.routing.PacketH\x00\x12)\n\ndisconnect\x18\x06 \x01(\x0b\x32\x13.routing.DisconnectH\x00\x42\t\n\x07message\"8\n\tTLRequest\x12+\n\x08protocol\x18\x01 \x01(\x0b\x32\x11.routing.ProtocolB\x06\xe2?\x03\xf0\x01\x01\"$\n\x13InternalServerError\x12\r\n\x05\x65rror\x18\x01 \x01(\x0c\".\n\x03\x41\x63k\x12\'\n\x06header\x18\x01 \x01(\x0b\x32\x0f.routing.HeaderB\x06\xe2?\x03\xf0\x01\x01\"q\n\nTLResponse\x12\x1b\n\x03\x61\x63k\x18\x01 \x01(\x0b\x32\x0c.routing.AckH\x00\x12;\n\x13internalServerError\x18\x02 \x01(\x0b\x32\x1c.routing.InternalServerErrorH\x00\x42\t\n\x07payload\"\x82\x01\n\x0b\x43hunkHeader\x12%\n\x06sender\x18\x01 \x01(\x0b\x32\r.routing.NodeB\x06\xe2?\x03\xf0\x01\x01\x12\x0e\n\x06typeId\x18\x02 \x01(\t\x12\x12\n\ncompressed\x18\x03 \x01(\x08\x12\x15\n\rcontentLength\x18\x04 \x01(\x05\x12\x11\n\tnetworkId\x18\x05 \x01(\t\" \n\tChunkData\x12\x13\n\x0b\x63ontentData\x18\x01 \x01(\x0c\"^\n\x05\x43hunk\x12&\n\x06header\x18\x01 \x01(\x0b\x32\x14.routing.ChunkHeaderH\x00\x12\"\n\x04\x64\x61ta\x18\x02 \x01(\x0b\x32\x12.routing.ChunkDataH\x00\x42\t\n\x07\x63ontent2v\n\x0eTransportLayer\x12\x31\n\x04Send\x12\x12.routing.TLRequest\x1a\x13.routing.TLResponse\"\x00\x12\x31\n\x06Stream\x12\x0e.routing.Chunk\x1a\x13.routing.TLResponse\"\x00(\x01\x42*\xe2?\'\n!coop.rchain.comm.protocol.routing\x10\x01H\x00\x62\x06proto3')



_NODE = DESCRIPTOR.message_types_by_name['Node']
_HEADER = DESCRIPTOR.message_types_by_name['Header']
_HEARTBEAT = DESCRIPTOR.message_types_by_name['Heartbeat']
_HEARTBEATRESPONSE = DESCRIPTOR.message_types_by_name['HeartbeatResponse']
_PROTOCOLHANDSHAKE = DESCRIPTOR.message_types_by_name['ProtocolHandshake']
_PROTOCOLHANDSHAKERESPONSE = DESCRIPTOR.message_types_by_name['ProtocolHandshakeResponse']
_PACKET = DESCRIPTOR.message_types_by_name['Packet']
_DISCONNECT = DESCRIPTOR.message_types_by_name['Disconnect']
_PROTOCOL = DESCRIPTOR.message_types_by_name['Protocol']
_TLREQUEST = DESCRIPTOR.message_types_by_name['TLRequest']
_INTERNALSERVERERROR = DESCRIPTOR.message_types_by_name['InternalServerError']
_ACK = DESCRIPTOR.message_types_by_name['Ack']
_TLRESPONSE = DESCRIPTOR.message_types_by_name['TLResponse']
_CHUNKHEADER = DESCRIPTOR.message_types_by_name['ChunkHeader']
_CHUNKDATA = DESCRIPTOR.message_types_by_name['ChunkData']
_CHUNK = DESCRIPTOR.message_types_by_name['Chunk']
Node = _reflection.GeneratedProtocolMessageType('Node', (_message.Message,), {
  'DESCRIPTOR' : _NODE,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.Node)
  })
_sym_db.RegisterMessage(Node)

Header = _reflection.GeneratedProtocolMessageType('Header', (_message.Message,), {
  'DESCRIPTOR' : _HEADER,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.Header)
  })
_sym_db.RegisterMessage(Header)

Heartbeat = _reflection.GeneratedProtocolMessageType('Heartbeat', (_message.Message,), {
  'DESCRIPTOR' : _HEARTBEAT,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.Heartbeat)
  })
_sym_db.RegisterMessage(Heartbeat)

HeartbeatResponse = _reflection.GeneratedProtocolMessageType('HeartbeatResponse', (_message.Message,), {
  'DESCRIPTOR' : _HEARTBEATRESPONSE,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.HeartbeatResponse)
  })
_sym_db.RegisterMessage(HeartbeatResponse)

ProtocolHandshake = _reflection.GeneratedProtocolMessageType('ProtocolHandshake', (_message.Message,), {
  'DESCRIPTOR' : _PROTOCOLHANDSHAKE,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.ProtocolHandshake)
  })
_sym_db.RegisterMessage(ProtocolHandshake)

ProtocolHandshakeResponse = _reflection.GeneratedProtocolMessageType('ProtocolHandshakeResponse', (_message.Message,), {
  'DESCRIPTOR' : _PROTOCOLHANDSHAKERESPONSE,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.ProtocolHandshakeResponse)
  })
_sym_db.RegisterMessage(ProtocolHandshakeResponse)

Packet = _reflection.GeneratedProtocolMessageType('Packet', (_message.Message,), {
  'DESCRIPTOR' : _PACKET,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.Packet)
  })
_sym_db.RegisterMessage(Packet)

Disconnect = _reflection.GeneratedProtocolMessageType('Disconnect', (_message.Message,), {
  'DESCRIPTOR' : _DISCONNECT,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.Disconnect)
  })
_sym_db.RegisterMessage(Disconnect)

Protocol = _reflection.GeneratedProtocolMessageType('Protocol', (_message.Message,), {
  'DESCRIPTOR' : _PROTOCOL,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.Protocol)
  })
_sym_db.RegisterMessage(Protocol)

TLRequest = _reflection.GeneratedProtocolMessageType('TLRequest', (_message.Message,), {
  'DESCRIPTOR' : _TLREQUEST,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.TLRequest)
  })
_sym_db.RegisterMessage(TLRequest)

InternalServerError = _reflection.GeneratedProtocolMessageType('InternalServerError', (_message.Message,), {
  'DESCRIPTOR' : _INTERNALSERVERERROR,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.InternalServerError)
  })
_sym_db.RegisterMessage(InternalServerError)

Ack = _reflection.GeneratedProtocolMessageType('Ack', (_message.Message,), {
  'DESCRIPTOR' : _ACK,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.Ack)
  })
_sym_db.RegisterMessage(Ack)

TLResponse = _reflection.GeneratedProtocolMessageType('TLResponse', (_message.Message,), {
  'DESCRIPTOR' : _TLRESPONSE,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.TLResponse)
  })
_sym_db.RegisterMessage(TLResponse)

ChunkHeader = _reflection.GeneratedProtocolMessageType('ChunkHeader', (_message.Message,), {
  'DESCRIPTOR' : _CHUNKHEADER,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.ChunkHeader)
  })
_sym_db.RegisterMessage(ChunkHeader)

ChunkData = _reflection.GeneratedProtocolMessageType('ChunkData', (_message.Message,), {
  'DESCRIPTOR' : _CHUNKDATA,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.ChunkData)
  })
_sym_db.RegisterMessage(ChunkData)

Chunk = _reflection.GeneratedProtocolMessageType('Chunk', (_message.Message,), {
  'DESCRIPTOR' : _CHUNK,
  '__module__' : 'routing_pb2'
  # @@protoc_insertion_point(class_scope:routing.Chunk)
  })
_sym_db.RegisterMessage(Chunk)

_TRANSPORTLAYER = DESCRIPTOR.services_by_name['TransportLayer']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\342?\'\n!coop.rchain.comm.protocol.routing\020\001H\000'
  _HEADER.fields_by_name['sender']._options = None
  _HEADER.fields_by_name['sender']._serialized_options = b'\342?\003\360\001\001'
  _PROTOCOL.fields_by_name['header']._options = None
  _PROTOCOL.fields_by_name['header']._serialized_options = b'\342?\003\360\001\001'
  _TLREQUEST.fields_by_name['protocol']._options = None
  _TLREQUEST.fields_by_name['protocol']._serialized_options = b'\342?\003\360\001\001'
  _ACK.fields_by_name['header']._options = None
  _ACK.fields_by_name['header']._serialized_options = b'\342?\003\360\001\001'
  _CHUNKHEADER.fields_by_name['sender']._options = None
  _CHUNKHEADER.fields_by_name['sender']._serialized_options = b'\342?\003\360\001\001'
  _NODE._serialized_start=49
  _NODE._serialized_end=117
  _HEADER._serialized_start=119
  _HEADER._serialized_end=185
  _HEARTBEAT._serialized_start=187
  _HEARTBEAT._serialized_end=198
  _HEARTBEATRESPONSE._serialized_start=200
  _HEARTBEATRESPONSE._serialized_end=219
  _PROTOCOLHANDSHAKE._serialized_start=221
  _PROTOCOLHANDSHAKE._serialized_end=255
  _PROTOCOLHANDSHAKERESPONSE._serialized_start=257
  _PROTOCOLHANDSHAKERESPONSE._serialized_end=299
  _PACKET._serialized_start=301
  _PACKET._serialized_end=342
  _DISCONNECT._serialized_start=344
  _DISCONNECT._serialized_end=356
  _PROTOCOL._serialized_start=359
  _PROTOCOL._serialized_end=673
  _TLREQUEST._serialized_start=675
  _TLREQUEST._serialized_end=731
  _INTERNALSERVERERROR._serialized_start=733
  _INTERNALSERVERERROR._serialized_end=769
  _ACK._serialized_start=771
  _ACK._serialized_end=817
  _TLRESPONSE._serialized_start=819
  _TLRESPONSE._serialized_end=932
  _CHUNKHEADER._serialized_start=935
  _CHUNKHEADER._serialized_end=1065
  _CHUNKDATA._serialized_start=1067
  _CHUNKDATA._serialized_end=1099
  _CHUNK._serialized_start=1101
  _CHUNK._serialized_end=1195
  _TRANSPORTLAYER._serialized_start=1197
  _TRANSPORTLAYER._serialized_end=1315
# @@protoc_insertion_point(module_scope)
